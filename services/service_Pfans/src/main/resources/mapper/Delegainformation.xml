<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nt.service_pfans.PFANS6000.mapper.DelegainformationMapper">
    <select id="getYears" parameterType="com.nt.dao_Pfans.PFANS6000.Delegainformation"
            resultType="com.nt.dao_Pfans.PFANS6000.Vo.DelegainformationVo">
        select
            de.delegainformation_id,
            #{year} as year,
            log.group_id,
            ex.account,
            ex.suppliername,
            expname,
            op.value1 as operationform,
            jo.value1 as jobclassification,
            if((de.april is null or de.april = ''),if((log.april is null or log.april = '' or log.april = '0'),'',log.april),de.april) as april,
            if((de.may is null or de.may = ''),if((log.may is null or log.may = '' or log.may = '0'),'',log.may),de.may) as may,
            if((de.june is null or de.june = ''),if((log.june is null or log.june = '' or log.june = '0'),'',log.june),de.june) as june,
            if((de.july is null or de.july = ''),if((log.july is null or log.july = '' or log.july = '0'),'',log.july),de.july) as july,
            if((de.august is null or de.august = ''),if((log.august is null or log.august = '' or log.august = '0'),'',log.august),de.august) as august,
            if((de.september is null or de.september = ''),if((log.september is null or log.september = '' or log.september = '0'),'',log.september),de.september) as september,
            if((de.october is null or de.october = ''),if((log.october is null or log.october = '' or log.october = '0'),'',log.october),de.october) as october,
            if((de.november is null or de.november = ''),if((log.november is null or log.november = '' or log.november = '0'),'',log.november),de.november) as november,
            if((de.december is null or de.december = ''),if((log.december is null or log.december = '' or log.december = '0'),'',log.december),de.december) as december,
            if((de.january is null or de.january = ''),if((log.january is null or log.january = '' or log.january = '0'),'',log.january),de.january) as january,
            if((de.february is null or de.february = ''),if((log.february is null or log.february = '' or log.february = '0'),'',log.february),de.february) as february,
            if((de.march is null or de.march = ''),if((log.march is null or log.march = '' or log.march = '0'),'',log.march),de.march) as march,
            de.remarks,
            al.value1 as alltechnology,
            si.value1 assitevaluation,
            exi.value1 as exitreason,
            bu.value1 as businessimpact,
            cou.value1 as countermeasure
        from
            (select createby,group_id,
            case when round(april/8/ #{april} ,4) between 1 and 1.1999 then 1
                 when round(april/8/ #{april} ,4) between 1.2 and 1.3999 then 1.1
                 when round(april/8/ #{april} ,4) between 1.4 and 1.5999 then 1.15
                 when round(april/8/ #{april} ,4) >= 1.6 then 1.3
                 else round(april/8/ #{april} ,2) end april,
            case when round(may/8/ #{may} ,4) between 1 and 1.1999 then 1
                 when round(may/8/ #{may} ,4) between 1.2 and 1.3999 then 1.1
                 when round(may/8/ #{may} ,4) between 1.4 and 1.5999 then 1.15
                 when round(may/8/ #{may} ,4) >= 1.6 then 1.3
                 else round(may/8/ #{may} ,2) end  may,
            case when round(june/8/ #{june} ,4) between 1 and 1.1999 then 1
                 when round(june/8/ #{june} ,4) between 1.2 and 1.3999 then 1.1
                 when round(june/8/ #{june} ,4) between 1.4 and 1.5999 then 1.15
                 when round(june/8/ #{june} ,4) >= 1.6 then 1.3
                 else round(june/8/ #{june} ,2) end june,
            case when round(july/8/ #{july} ,4) between 1 and 1.1999 then 1
                 when round(july/8/ #{july} ,4) between 1.2 and 1.3999 then 1.1
                 when round(july/8/ #{july} ,4) between 1.4 and 1.5999 then 1.15
                 when round(july/8/ #{july} ,4) >= 1.6 then 1.3
                 else round(july/8/ #{july} ,2) end july,
            case when round(august/8/ #{august} ,4) between 1 and 1.1999 then 1
                 when round(august/8/ #{august} ,4) between 1.2 and 1.3999 then 1.1
                 when round(august/8/ #{august} ,4) between 1.4 and 1.5999 then 1.15
                 when round(august/8/ #{august} ,4) >= 1.6 then 1.3
                 else round(august/8/ #{august} ,2) end august,
            case when round(september/8/ #{september} ,4) between 1 and 1.1999 then 1
                 when round(september/8/ #{september} ,4) between 1.2 and 1.3999 then 1.1
                 when round(september/8/ #{september} ,4) between 1.4 and 1.5999 then 1.15
                 when round(september/8/ #{september} ,4) >= 1.6 then 1.3
                 else round(september/8/ #{september} ,2) end september,
            case when round(october/8/ #{october} ,4) between 1 and 1.1999 then 1
                 when round(october/8/ #{october} ,4) between 1.2 and 1.3999 then 1.1
                 when round(october/8/ #{october} ,4) between 1.4 and 1.5999 then 1.15
                 when round(october/8/ #{october} ,4) >= 1.6 then 1.3
                 else round(october/8/ #{october} ,2) end october,
            case when round(november/8/ #{november} ,4) between 1 and 1.1999 then 1
                 when round(november/8/ #{november} ,4) between 1.2 and 1.3999 then 1.1
                 when round(november/8/ #{november} ,4) between 1.4 and 1.5999 then 1.15
                 when round(november/8/ #{november} ,4) >= 1.6 then 1.3
                 else round(november/8/ #{november} ,2) end november,
            case when round(december/8/ #{december} ,4) between 1 and 1.1999 then 1
                 when round(december/8/ #{december} ,4) between 1.2 and 1.3999 then 1.1
                 when round(december/8/ #{december} ,4) between 1.4 and 1.5999 then 1.15
                 when round(december/8/ #{december} ,4) >= 1.6 then 1.3
                 else round(december/8/ #{december} ,2) end december,
            case when round(january/8/ #{january} ,4) between 1 and 1.1999 then 1
                 when round(january/8/ #{january} ,4) between 1.2 and 1.3999 then 1.1
                 when round(january/8/ #{january} ,4) between 1.4 and 1.5999 then 1.15
                 when round(january/8/ #{january} ,4) >= 1.6 then 1.3
                 else round(january/8/ #{january} ,2) end january,
            case when round(february/8/ #{february} ,4) between 1 and 1.1999 then 1
                 when round(february/8/ #{february} ,4) between 1.2 and 1.3999 then 1.1
                 when round(february/8/ #{february} ,4) between 1.4 and 1.5999 then 1.15
                 when round(february/8/ #{february} ,4) >= 1.6 then 1.3
                 else round(february/8/ #{february} ,2) end february,
            case when round(march/8/ #{march} ,4) between 1 and 1.1999 then 1
                 when round(march/8/ #{march} ,4) between 1.2 and 1.3999 then 1.1
                 when round(march/8/ #{march} ,4) between 1.4 and 1.5999 then 1.15
                 when round(march/8/ #{march} ,4) >= 1.6 then 1.3
                 else round(march/8/ #{march} ,2) end march
            from
            (select logmanagement.createby,group_id,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'04') THEN TIME_START ELSE 0 END) AS april,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'05') THEN TIME_START ELSE 0 END) AS may,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'06') THEN TIME_START ELSE 0 END) AS june,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'07') THEN TIME_START ELSE 0 END) AS july,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'08') THEN TIME_START ELSE 0 END) AS august,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'09') THEN TIME_START ELSE 0 END) AS september,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'10') THEN TIME_START ELSE 0 END) AS october,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'11') THEN TIME_START ELSE 0 END) AS november,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year},'12') THEN TIME_START ELSE 0 END) AS december,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year} + 1,'01') THEN TIME_START ELSE 0 END) AS january,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year} + 1,'02') THEN TIME_START ELSE 0 END) AS february,
            SUM(CASE DATE_FORMAT(LOG_DATE, '%Y%m') WHEN CONCAT(#{year} + 1,'03') THEN TIME_START ELSE 0 END) AS march
            from logmanagement
            where (DATE_FORMAT(LOG_DATE, '%Y') = #{year} OR DATE_FORMAT(LOG_DATE, '%Y') = #{year} + 1)
            <if test="group_id != null and group_id != ''" >
                and group_id = #{group_id}
            </if>
            group by createby,group_id) ment
            ) log
        left join expatriatesinfor ex
        on ex.account = log.createby
        left join delegainformation de
        on ex.account = de.account
        and de.group_id = log.group_id
        and de.year = #{year}
        left join dictionary jo
        on jo.code = ex.jobclassification
        left join dictionary op
        on op.code = ex.operationform
        left join dictionary al
        on al.code = ex.alltechnology
        left join dictionary si
        on si.code = ex.sitevaluation
        left join dictionary exi
        on exi.code = ex.exitreason
        left join dictionary bu
        on bu.code = ex.businessimpact
        left join dictionary cou
        on cou.code = ex.countermeasure
        where ex.result = 'BP003001'
        and ex.account != ''
        order by ex.expname
    </select>

    <select id="getYears1" parameterType="com.nt.dao_Pfans.PFANS6000.Delegainformation"
            resultType="com.nt.dao_Pfans.PFANS6000.Vo.DelegainformationVo">
        select
        de.delegainformation_id,
        #{year} as year,
        ex.group_id,
        ex.account,
        ex.suppliername,
        ex.expname,
        op.value1 as operationform,
        jo.value1 as jobclassification,
        if((de.april is null or de.april = '' or de.april = '0'),'',de.april) as april,
        if((de.may is null or de.may = '' or de.may = '0'),'',de.may) as may,
        if((de.june is null or de.june = '' or de.june = '0'),'',de.june) as june,
        if((de.july is null or de.july = '' or de.july = '0'),'',de.july) as july,
        if((de.august is null or de.august = '' or de.august = '0'),'',de.august) as august,
        if((de.september is null or de.september = '' or de.september = '0'),'',de.september) as september,
        if((de.october is null or de.october = '' or de.october = '0'),'',de.october) as october,
        if((de.november is null or de.november = '' or de.november = '0'),'',de.november) as november,
        if((de.december is null or de.december = '' or de.december = '0'),'',de.december) as december,
        if((de.january is null or de.january = '' or de.january = '0'),'',de.january) as january,
        if((de.february is null or de.february = '' or de.february = '0'),'',de.february) as february,
        if((de.march is null or de.march = '' or de.march = '0'),'',de.march) as march,
        '' as remarks,
        al.value1 as alltechnology,
        si.value1 assitevaluation,
        exi.value1 as exitreason,
        bu.value1 as businessimpact,
        cou.value1 as countermeasure
        from
        expatriatesinfor ex
        left join delegainformation de
        on ex.account = de.account
        and de.group_id = ex.group_id
        and de.year = #{year}
        left join dictionary jo
        on jo.code = ex.jobclassification
        left join dictionary op
        on op.code = ex.operationform
        left join dictionary al
        on al.code = ex.alltechnology
        left join dictionary si
        on si.code = ex.sitevaluation
        left join dictionary exi
        on exi.code = ex.exitreason
        left join dictionary bu
        on bu.code = ex.businessimpact
        left join dictionary cou
        on cou.code = ex.countermeasure
        where ex.result = 'BP003001'
        and ex.account != ''
        <if test="group_id != null and group_id != ''" >
            and ex.group_id = #{group_id}
        </if>
        <if test="grouplist != null and grouplist.size() > 0">
            and ex.account not in
            <foreach item="item" index="index" collection="grouplist"
                     open="(" separator="," close=")">
                #{item.account}
            </foreach>
        </if>
        order by ex.expname
    </select>
</mapper>

