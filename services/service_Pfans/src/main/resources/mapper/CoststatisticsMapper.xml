<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nt.service_pfans.PFANS6000.mapper.CoststatisticsMapper">

	<select id="getExpatriatesinfor" parameterType="com.nt.dao_Pfans.PFANS6000.Coststatistics" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		/*select exp.`EXPNAME` as BPNAME,
		sum(exp.`JANUARY`) as MANHOUR1, sum(exp.FEBRUARY) as MANHOUR2, sum(exp.MARCH) as MANHOUR3, sum(exp.APRIL) as MANHOUR4, sum(exp.MAY) as MANHOUR5, sum(exp.JUNE) as MANHOUR6,
		sum(exp.`JULY`) as MANHOUR7, sum(exp.AUGUST) as MANHOUR8, sum(exp.SEPTEMBER) as MANHOUR9, sum(exp.OCTOBER) as MANHOUR10, sum(exp.NOVEMBER) as MANHOUR11, sum(exp.DECEMBER) as MANHOUR12
		from expatriatesinfor exp
		where exp.`STATUS` = '0'
		group by exp.`EXPNAME`*/
		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,
		sum(CONVERT(df.`MANHOUR1`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.MANHOUR2,DECIMAL(10,2))) as MANHOUR2,
		sum(CONVERT(df.MANHOUR3,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.MANHOUR4,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MANHOUR5,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.MANHOUR6,DECIMAL(10,2))) as MANHOUR6,
		sum(CONVERT(df.`MANHOUR7`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.MANHOUR8,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.MANHOUR9,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.MANHOUR10,DECIMAL(10,2))) as MANHOUR10,
		sum(CONVERT(df.MANHOUR11,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.MANHOUR12,DECIMAL(10,2))) as MANHOUR12
		,df.years as years
		,df.GROUP_ID as groupid
		from
		coststatistics df
		inner join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		where df.status = '0'
		and df.years = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID = #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.years,df.GROUP_ID
	</select>

	<insert id="insertAll" parameterType="java.util.List">
		insert into coststatistics
		(COSTSTATISTICS_ID,BPNAME,BPCOMPANY,UNITPRICE,MANHOUR4,COST4,MANHOUR5,COST5,MANHOUR6,COST6,
		SUPPORT6,TOTALMANHOURS6,TOTALCOST6,EXPENSE6,CONTRACT6,MANHOUR7,COST7,MANHOUR8,COST8,
		MANHOUR9,COST9,SUPPORT9,TOTALMANHOURS9,TOTALCOST9,EXPENSE9,CONTRACT9,
		MANHOUR10,COST10,MANHOUR11,COST11,MANHOUR12,COST12,
		SUPPORT12,TOTALMANHOURS12,TOTALCOST12,EXPENSE12,CONTRACT12,
		MANHOUR1,COST1,MANHOUR2,COST2,MANHOUR3,COST3,SUPPORT3,TOTALMANHOURS3,TOTALCOST3,EXPENSE3,CONTRACT3,
		PRICE1,PRICE2,PRICE3,PRICE4,PRICE5,PRICE6,PRICE7,PRICE8,PRICE9,PRICE10,PRICE11,PRICE12,
		ROWINDEX,CREATEBY,CREATEON,MODIFYBY,MODIFYON,OWNER,STATUS,TENANTID,BPNAME1,YEARS,GROUP_ID)
		values
		<foreach item="item" collection="list" separator=",">
			(#{item.coststatistics_id},
			#{item.bpname},
			#{item.bpcompany},
			#{item.unitprice},
			#{item.manhour4},
			#{item.cost4},
			#{item.manhour5},
			#{item.cost5},
			#{item.manhour6},
			#{item.cost6},
			#{item.support6},
			#{item.totalmanhours6},
			#{item.totalcost6},
			#{item.expense6},
			#{item.contract6},
			#{item.manhour7},
			#{item.cost7},
			#{item.manhour8},
			#{item.cost8},
			#{item.manhour9},
			#{item.cost9},
			#{item.support9},
			#{item.totalmanhours9},
			#{item.totalcost9},
			#{item.expense9},
			#{item.contract9},
			#{item.manhour10},
			#{item.cost10},
			#{item.manhour11},
			#{item.cost11},
			#{item.manhour12},
			#{item.cost12},
			#{item.support12},
			#{item.totalmanhours12},
			#{item.totalcost12},
			#{item.expense12},
			#{item.contract12},
			#{item.manhour1},
			#{item.cost1},
			#{item.manhour2},
			#{item.cost2},
			#{item.manhour3},
			#{item.cost3},
			#{item.support3},
			#{item.totalmanhours3},
			#{item.totalcost3},
			#{item.expense3},
			#{item.contract3},
			#{item.price1},
			#{item.price2},
			#{item.price3},
			#{item.price4},
			#{item.price5},
			#{item.price6},
			#{item.price7},
			#{item.price8},
			#{item.price9},
			#{item.price10},
			#{item.price11},
			#{item.price12},
			#{item.rowindex},
			#{item.createby},
			#{item.createon},
			#{item.modifyby},
			#{item.modifyon},
			#{item.owner},
			#{item.status},
			#{item.tenantid},
			#{item.bpname1},
			#{item.years},
			#{item.groupid})
		</foreach>
	</insert>

	<select id="selectBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		select c.*
		from coststatistics as c
		<if test="groupid!=null and groupid !=''">
			where c.GROUP_ID = #{groupid}
		</if>
	</select>

	<select id="getCoststatisticsBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">

		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,
			sum(CONVERT(df.`JANUARY`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.FEBRUARY,DECIMAL(10,2))) as MANHOUR2,
			sum(CONVERT(df.MARCH,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.APRIL,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MAY,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.JUNE,DECIMAL(10,2))) as MANHOUR6,
			sum(CONVERT(df.`JULY`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.AUGUST,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.SEPTEMBER,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.OCTOBER,DECIMAL(10,2))) as MANHOUR10,
			sum(CONVERT(df.NOVEMBER,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.DECEMBER,DECIMAL(10,2))) as MANHOUR12
			,df.year as years

		,df.GROUP_ID as groupid
		from
		delegainformation df
		left join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		where df.status = '0'
		and df.year = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID =  #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.year,df.GROUP_ID
	</select>
</mapper>
