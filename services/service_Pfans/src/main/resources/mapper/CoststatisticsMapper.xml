<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nt.service_pfans.PFANS6000.mapper.CoststatisticsMapper">

	<select id="getExpatriatesinfor" parameterType="com.nt.dao_Pfans.PFANS6000.Coststatistics" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		/*select exp.`EXPNAME` as BPNAME,
		sum(exp.`JANUARY`) as MANHOUR1, sum(exp.FEBRUARY) as MANHOUR2, sum(exp.MARCH) as MANHOUR3, sum(exp.APRIL) as MANHOUR4, sum(exp.MAY) as MANHOUR5, sum(exp.JUNE) as MANHOUR6,
		sum(exp.`JULY`) as MANHOUR7, sum(exp.AUGUST) as MANHOUR8, sum(exp.SEPTEMBER) as MANHOUR9, sum(exp.OCTOBER) as MANHOUR10, sum(exp.NOVEMBER) as MANHOUR11, sum(exp.DECEMBER) as MANHOUR12
		from expatriatesinfor exp
		where exp.`STATUS` = '0'
		group by exp.`EXPNAME`*/
		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,
		sum(CONVERT(df.`MANHOUR1`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.MANHOUR2,DECIMAL(10,2))) as MANHOUR2,
		sum(CONVERT(df.MANHOUR3,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.MANHOUR4,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MANHOUR5,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.MANHOUR6,DECIMAL(10,2))) as MANHOUR6,
		sum(CONVERT(df.`MANHOUR7`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.MANHOUR8,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.MANHOUR9,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.MANHOUR10,DECIMAL(10,2))) as MANHOUR10,
		sum(CONVERT(df.MANHOUR11,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.MANHOUR12,DECIMAL(10,2))) as MANHOUR12
		,df.years as years
		,df.GROUP_ID as groupid
		from
		coststatistics df
		inner join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		where df.status = '0'
		and df.years = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID = #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.years,df.GROUP_ID
	</select>

	<insert id="insertAll" parameterType="java.util.List">
		insert into coststatistics
		(COSTSTATISTICS_ID,BPNAME,BPCOMPANY,UNITPRICE,MANHOUR4,COST4,MANHOUR5,COST5,MANHOUR6,COST6,
		SUPPORT6,TOTALMANHOURS6,TOTALCOST6,EXPENSE6,CONTRACT6,MANHOUR7,COST7,MANHOUR8,COST8,
		MANHOUR9,COST9,SUPPORT9,TOTALMANHOURS9,TOTALCOST9,EXPENSE9,CONTRACT9,
		MANHOUR10,COST10,MANHOUR11,COST11,MANHOUR12,COST12,
		SUPPORT12,TOTALMANHOURS12,TOTALCOST12,EXPENSE12,CONTRACT12,
		MANHOUR1,COST1,MANHOUR2,COST2,MANHOUR3,COST3,SUPPORT3,TOTALMANHOURS3,TOTALCOST3,EXPENSE3,CONTRACT3,
		PRICE1,PRICE2,PRICE3,PRICE4,PRICE5,PRICE6,PRICE7,PRICE8,PRICE9,PRICE10,PRICE11,PRICE12,
		ROWINDEX,CREATEBY,CREATEON,MODIFYBY,MODIFYON,OWNER,STATUS,TENANTID,BPNAME1,YEARS,GROUP_ID)
		values
		<foreach item="item" collection="list" separator=",">
			(#{item.coststatistics_id},
			#{item.bpname},
			#{item.bpcompany},
			#{item.unitprice},
			#{item.manhour4},
			#{item.cost4},
			#{item.manhour5},
			#{item.cost5},
			#{item.manhour6},
			#{item.cost6},
			#{item.support6},
			#{item.totalmanhours6},
			#{item.totalcost6},
			#{item.expense6},
			#{item.contract6},
			#{item.manhour7},
			#{item.cost7},
			#{item.manhour8},
			#{item.cost8},
			#{item.manhour9},
			#{item.cost9},
			#{item.support9},
			#{item.totalmanhours9},
			#{item.totalcost9},
			#{item.expense9},
			#{item.contract9},
			#{item.manhour10},
			#{item.cost10},
			#{item.manhour11},
			#{item.cost11},
			#{item.manhour12},
			#{item.cost12},
			#{item.support12},
			#{item.totalmanhours12},
			#{item.totalcost12},
			#{item.expense12},
			#{item.contract12},
			#{item.manhour1},
			#{item.cost1},
			#{item.manhour2},
			#{item.cost2},
			#{item.manhour3},
			#{item.cost3},
			#{item.support3},
			#{item.totalmanhours3},
			#{item.totalcost3},
			#{item.expense3},
			#{item.contract3},
			#{item.price1},
			#{item.price2},
			#{item.price3},
			#{item.price4},
			#{item.price5},
			#{item.price6},
			#{item.price7},
			#{item.price8},
			#{item.price9},
			#{item.price10},
			#{item.price11},
			#{item.price12},
			#{item.rowindex},
			#{item.createby},
			#{item.createon},
			#{item.modifyby},
			#{item.modifyon},
			#{item.owner},
			#{item.status},
			#{item.tenantid},
			#{item.bpname1},
			#{item.years},
			#{item.groupid})
		</foreach>
	</insert>

	<select id="selectBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		select c.*
		from coststatistics as c
		<if test="groupid!=null and groupid !=''">
			where c.GROUP_ID = #{groupid}
		</if>
	</select>

	<select id="getCoststatisticsBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">

		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,
			sum(CONVERT(df.`JANUARY`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.FEBRUARY,DECIMAL(10,2))) as MANHOUR2,
			sum(CONVERT(df.MARCH,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.APRIL,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MAY,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.JUNE,DECIMAL(10,2))) as MANHOUR6,
			sum(CONVERT(df.`JULY`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.AUGUST,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.SEPTEMBER,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.OCTOBER,DECIMAL(10,2))) as MANHOUR10,
			sum(CONVERT(df.NOVEMBER,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.DECEMBER,DECIMAL(10,2))) as MANHOUR12
			,df.year as years

		,df.GROUP_ID as groupid
		from
		delegainformation df
		left join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		where df.status = '0'
		and df.year = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID =  #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.year,df.GROUP_ID
	</select>

	<select id="getcostMonthList" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		select co.*,
			concat(co.groupid,',',substring(#{years},1,4),',',substring(#{years},6,7)) as coststatistics_id,
		    workflow.status
		from (
			select
			group_id as groupid,
			round(sum(manhour4),2) as manhour4,
			round(sum(cost4),2) as cost4,
			round(sum(manhour5),2) as manhour5,
			round(sum(cost5),2) as cost5,
			round(sum(manhour6),2) as manhour6,
			round(sum(cost6),2) as cost6,
			round(sum(manhour7),2) as manhour7,
			round(sum(cost7),2) as cost7,
			round(sum(manhour8),2) as manhour8,
			round(sum(cost8),2) as cost8,
			round(sum(manhour9),2) as manhour9,
			round(sum(cost9),2) as cost9,
			round(sum(manhour10),2) as manhour10,
			round(sum(cost10),2) as cost10,
			round(sum(manhour11),2) as manhour11,
			round(sum(cost11),2) as cost11,
			round(sum(manhour12),2) as manhour12,
			round(sum(cost12),2) as cost12,
			round(sum(manhour1),2) as manhour1,
			round(sum(cost1),2) as cost1,
			round(sum(manhour2),2) as manhour2,
			round(sum(cost2),2) as cost2,
			round(sum(manhour3),2) as manhour3,
			round(sum(cost3),2) as cost3
			from coststatistics
			where years = substring(#{years},1,4)
			<if test="groupIdList != null and groupIdList.size() > 0 ">
			    and group_id in
				<foreach item="item" index="index" collection="groupIdList"
							 open="(" separator="," close=")">
					#{item}
				</foreach>
				</if>
			group by group_id
		) co
		left join
		(
			SELECT
				wf1.*
			FROM
				workflowinstance wf1
			WHERE
			NOT EXISTS
			(
				SELECT
				1
				FROM
				workflowinstance wf2
				WHERE
				wf2.DATAID = wf1.DATAID
				AND wf2.CREATEON > wf1.CREATEON
			)
		) workflow
		on workflow.DATAID = concat(co.groupid,',',substring(#{years},1,4),',',substring(#{years},6,7))
	</select>

	<select id="getcostMonth" parameterType="java.lang.String" resultType="java.util.HashMap">
		SELECT
			co1.bpcompany,
			case when co1.ex1manhour = '0.00' then '' else round(co1.ex1manhour,2) end ex1manhour0,
			case when co1.ex1cost = '0.00' then '' else round(co1.ex1cost,2) end ex1cost0,
			case when co1.ex1usercount = '0' then '' else co1.ex1usercount end ex1usercount0,
			case when co2.ex2manhour = '0.00' then '' else round(co2.ex2manhour,2) end ex2manhour0,
			case when co2.ex2cost = '0.00' then '' else round(co2.ex2cost,2) end ex2cost0,
			case when co2.ex2usercount = '0' then '' else co2.ex2usercount end ex2usercount0,
			@manhourcount0 := round( co1.ex1manhour + co2.ex2manhour, 2 ) as manhourcount0,
			@manhourcount0 as bpmanhourcount,
			@costcount0 := round( co1.ex1cost + co2.ex2cost, 2 ) as  costcount0,
			@costcount0 as bpcostcount
		FROM
			(
				SELECT
					coststatistics.bpcompany,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL ) THEN ${manhour} ELSE 0 END ) AS ex1manhour,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL ) THEN ${cost} ELSE 0 END ) AS ex1cost,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL ) THEN 1 ELSE 0 END ) AS ex1usercount
				FROM
					coststatistics
					LEFT JOIN expatriatesinfor ex1 ON coststatistics.bpname = ex1.expatriatesinfor_id
					AND ex1.jobclassification IN ('BP025001','BP025002','BP025005' )
				WHERE coststatistics.years = #{years}
				GROUP BY bpcompany
			) co1
			LEFT JOIN (
				SELECT
					coststatistics.bpcompany,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex2.EXPATRIATESINFOR_ID IS NOT NULL ) THEN ${manhour} ELSE 0 END ) AS ex2manhour,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex2.EXPATRIATESINFOR_ID IS NOT NULL ) THEN ${cost} ELSE 0 END ) AS ex2cost,
					SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex2.EXPATRIATESINFOR_ID IS NOT NULL ) THEN 1 ELSE 0 END ) AS ex2usercount
				FROM
					coststatistics
					LEFT JOIN expatriatesinfor ex2 ON coststatistics.bpname = ex2.expatriatesinfor_id
					AND ex2.jobclassification IN ('BP025003','BP025004' )
				WHERE coststatistics.years = #{years}
				GROUP BY bpcompany
			) co2 ON co1.bpcompany = co2.bpcompany
		order by co1.bpcompany
	</select>
</mapper>
