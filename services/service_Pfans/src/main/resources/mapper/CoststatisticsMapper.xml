<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nt.service_pfans.PFANS6000.mapper.CoststatisticsMapper">

	<select id="getExpatriatesinfor" parameterType="com.nt.dao_Pfans.PFANS6000.Coststatistics" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		/*select exp.`EXPNAME` as BPNAME,
		sum(exp.`JANUARY`) as MANHOUR1, sum(exp.FEBRUARY) as MANHOUR2, sum(exp.MARCH) as MANHOUR3, sum(exp.APRIL) as MANHOUR4, sum(exp.MAY) as MANHOUR5, sum(exp.JUNE) as MANHOUR6,
		sum(exp.`JULY`) as MANHOUR7, sum(exp.AUGUST) as MANHOUR8, sum(exp.SEPTEMBER) as MANHOUR9, sum(exp.OCTOBER) as MANHOUR10, sum(exp.NOVEMBER) as MANHOUR11, sum(exp.DECEMBER) as MANHOUR12
		from expatriatesinfor exp
		where exp.`STATUS` = '0'
		group by exp.`EXPNAME`*/
		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,
		sum(CONVERT(df.`MANHOUR1`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.MANHOUR2,DECIMAL(10,2))) as MANHOUR2,
		sum(CONVERT(df.MANHOUR3,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.MANHOUR4,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MANHOUR5,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.MANHOUR6,DECIMAL(10,2))) as MANHOUR6,
		sum(CONVERT(df.`MANHOUR7`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.MANHOUR8,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.MANHOUR9,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.MANHOUR10,DECIMAL(10,2))) as MANHOUR10,
		sum(CONVERT(df.MANHOUR11,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.MANHOUR12,DECIMAL(10,2))) as MANHOUR12
		,df.years as years
		,df.GROUP_ID as groupid
		from
		coststatistics df
		inner join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		where df.status = '0'
		and df.years = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID = #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.years,df.GROUP_ID
	</select>

	<insert id="insertAll" parameterType="java.util.List">
		insert into coststatistics
		(COSTSTATISTICS_ID,BPNAME,BPCOMPANY,UNITPRICE,
		MANHOUR4,COST4,EXPENSESOLO4,
		MANHOUR5,COST5,EXPENSESOLO5,
		MANHOUR6,COST6,EXPENSESOLO6,
		SUPPORT6,TOTALMANHOURS6,TOTALCOST6,EXPENSE6,CONTRACT6,
		MANHOUR7,COST7,EXPENSESOLO7,
		MANHOUR8,COST8,EXPENSESOLO8,
		MANHOUR9,COST9,EXPENSESOLO9,
		SUPPORT9,TOTALMANHOURS9,TOTALCOST9,EXPENSE9,CONTRACT9,
		MANHOUR10,COST10,EXPENSESOLO10,
		MANHOUR11,COST11,EXPENSESOLO11,
		MANHOUR12,COST12,EXPENSESOLO12,
		SUPPORT12,TOTALMANHOURS12,TOTALCOST12,EXPENSE12,CONTRACT12,
		MANHOUR1,COST1,EXPENSESOLO1,
		MANHOUR2,COST2,EXPENSESOLO2,
		MANHOUR3,COST3,EXPENSESOLO3,
		SUPPORT3,TOTALMANHOURS3,TOTALCOST3,EXPENSE3,CONTRACT3,
		PRICE1,PRICE2,PRICE3,PRICE4,PRICE5,PRICE6,PRICE7,PRICE8,PRICE9,PRICE10,PRICE11,PRICE12,
		ROWINDEX,CREATEBY,CREATEON,MODIFYBY,MODIFYON,OWNER,STATUS,TENANTID,BPNAME1,YEARS,GROUP_ID)
		values
		<foreach item="item" collection="list" separator=",">
			(#{item.coststatistics_id},#{item.bpname},#{item.bpcompany},#{item.unitprice},
			#{item.manhour4},#{item.cost4},#{item.expensesolo4},
			#{item.manhour5},#{item.cost5},#{item.expensesolo5},
			#{item.manhour6},#{item.cost6},#{item.expensesolo6},
			#{item.support6},#{item.totalmanhours6},#{item.totalcost6},#{item.expense6},#{item.contract6},
			#{item.manhour7},#{item.cost7},#{item.expensesolo7},
			#{item.manhour8},#{item.cost8},#{item.expensesolo8},
			#{item.manhour9},#{item.cost9},#{item.expensesolo9},
			#{item.support9},#{item.totalmanhours9},#{item.totalcost9},#{item.expense9},#{item.contract9},
			#{item.manhour10},#{item.cost10},#{item.expensesolo10},
			#{item.manhour11},#{item.cost11},#{item.expensesolo11},
			#{item.manhour12},#{item.cost12},#{item.expensesolo12},
			#{item.support12},#{item.totalmanhours12},#{item.totalcost12},#{item.expense12},#{item.contract12},
			#{item.manhour1},#{item.cost1},#{item.expensesolo1},
			#{item.manhour2},#{item.cost2},#{item.expensesolo2},
			#{item.manhour3},#{item.cost3},#{item.expensesolo3},
			#{item.support3},#{item.totalmanhours3},#{item.totalcost3},#{item.expense3},#{item.contract3},
			#{item.price1},
			#{item.price2},
			#{item.price3},
			#{item.price4},
			#{item.price5},
			#{item.price6},
			#{item.price7},
			#{item.price8},
			#{item.price9},
			#{item.price10},
			#{item.price11},
			#{item.price12},
			#{item.rowindex},
			#{item.createby},
			#{item.createon},
			#{item.modifyby},
			#{item.modifyon},
			#{item.owner},
			#{item.status},
			#{item.tenantid},
			#{item.bpname1},
			#{item.years},
			#{item.groupid})
		</foreach>
	</insert>

	<update id="updateAll" parameterType="java.util.List">
		<foreach item="item" collection="list" index="index">
			UPDATE coststatistics
			SET
			BPNAME = #{item.bpname}, BPCOMPANY = #{item.bpcompany}, UNITPRICE = #{item.unitprice},
			MANHOUR4 = #{item.manhour4},
			COST4 = #{item.cost4},
			EXPENSESOLO4 = #{item.expensesolo4},
			MANHOUR5 = #{item.manhour5},
			COST5 = #{item.cost5},
			EXPENSESOLO5 = #{item.expensesolo5},
			MANHOUR6 = #{item.manhour6},
			COST6 = #{item.cost6},
			EXPENSESOLO6 = #{item.expensesolo6},
			SUPPORT6 = #{item.support6},
			TOTALMANHOURS6 = #{item.totalmanhours6},
			TOTALCOST6 = #{item.totalcost6},
			EXPENSE6 = #{item.expense6},
			CONTRACT6 = #{item.contract6},
			MANHOUR7 = #{item.manhour7},
			COST7 = #{item.cost7},
			EXPENSESOLO7 = #{item.expensesolo7},
			MANHOUR8 = #{item.manhour8},
			COST8 = #{item.cost8},
			EXPENSESOLO8 = #{item.expensesolo8},
			MANHOUR9 = #{item.manhour9},
			COST9 = #{item.cost9},
			EXPENSESOLO9 = #{item.expensesolo9},
			SUPPORT9 = #{item.support9},
			TOTALMANHOURS9 = #{item.totalmanhours9},
			TOTALCOST9 = #{item.totalcost9},
			EXPENSE9 = #{item.expense9},
			CONTRACT9 = #{item.contract9},
			MANHOUR10 = #{item.manhour10},
			COST10 = #{item.cost10},
			EXPENSESOLO10 = #{item.expensesolo10},
			MANHOUR11 = #{item.manhour11},
			COST11 = #{item.cost11},
			EXPENSESOLO11 = #{item.expensesolo11},
			MANHOUR12 = #{item.manhour12},
			COST12 = #{item.cost12},
			EXPENSESOLO12 = #{item.expensesolo12},
			SUPPORT12 = #{item.support12},
			TOTALMANHOURS12 =#{item.totalmanhours12},
			TOTALCOST12 = #{item.totalcost12},
			EXPENSE12 = #{item.expense12},
			CONTRACT12 = #{item.contract12},
			MANHOUR1 = #{item.manhour1},
			COST1 = #{item.cost1},
			EXPENSESOLO1 = #{item.expensesolo1},
			MANHOUR2 = #{item.manhour2},
			COST2 = #{item.cost2},
			EXPENSESOLO2 = #{item.expensesolo2},
			MANHOUR3 = #{item.manhour3},
			COST3 = #{item.cost3},
			EXPENSESOLO3 = #{item.expensesolo3},
			SUPPORT3 = #{item.support3},
			TOTALMANHOURS3 = #{item.totalmanhours3},
			TOTALCOST3 = #{item.totalcost3},
			EXPENSE3 = #{item.expense3},
			CONTRACT3 = #{item.contract3},
			PRICE1 = #{item.price1},
			PRICE2 = #{item.price2},
			PRICE3 = #{item.price3},
			PRICE4 = #{item.price4},
			PRICE5 = #{item.price5},
			PRICE6 = #{item.price6},
			PRICE7 = #{item.price7},
			PRICE8 = #{item.price8},
			PRICE9 = #{item.price9},
			PRICE10 = #{item.price10},
			PRICE11 = #{item.price11},
			PRICE12 = #{item.price12},
			ROWINDEX = #{item.rowindex},
			CREATEBY = #{item.createby},
			CREATEON = #{item.createon},
			MODIFYBY = #{item.modifyby},
			MODIFYON = #{item.modifyon},
			OWNER = #{item.owner},
			STATUS = #{item.status},
			TENANTID = #{item.tenantid},
			BPNAME1 = #{item.bpname1},
			YEARS = #{item.years},
			GROUP_ID =#{item.groupid}
			WHERE COSTSTATISTICS_ID = #{item.coststatistics_id};
		</foreach>
	</update>

	<select id="selectBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		select c.*
		from coststatistics as c
		where 1=1
		and c.years = #{year}
		<if test="groupid!=null and groupid !=''">
			and  c.GROUP_ID = #{groupid}
		</if>
	</select>

	<select id="getCoststatisticsBygroupid" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">

		select exp.EXPATRIATESINFOR_ID as BPNAME,exp.EXPNAME as BPNAME1,exp.SUPPLIERINFOR_ID as BPCOMPANY,
			sum(CONVERT(df.`JANUARY`,DECIMAL(10,2))) as MANHOUR1, sum(CONVERT(df.FEBRUARY,DECIMAL(10,2))) as MANHOUR2,
			sum(CONVERT(df.MARCH,DECIMAL(10,2))) as MANHOUR3, sum(CONVERT(df.APRIL,DECIMAL(10,2))) as MANHOUR4, sum(CONVERT(df.MAY,DECIMAL(10,2))) as MANHOUR5, sum(CONVERT(df.JUNE,DECIMAL(10,2))) as MANHOUR6,
			sum(CONVERT(df.`JULY`,DECIMAL(10,2))) as MANHOUR7, sum(CONVERT(df.AUGUST,DECIMAL(10,2))) as MANHOUR8, sum(CONVERT(df.SEPTEMBER,DECIMAL(10,2))) as MANHOUR9, sum(CONVERT(df.OCTOBER,DECIMAL(10,2))) as MANHOUR10,
			sum(CONVERT(df.NOVEMBER,DECIMAL(10,2))) as MANHOUR11, sum(CONVERT(df.DECEMBER,DECIMAL(10,2))) as MANHOUR12
			,df.year as years

		,df.GROUP_ID as groupid
		from
		delegainformation df
		inner join expatriatesinfor exp
		on df.ACCOUNT = exp.ACCOUNT
		and df.SUPPLIERINFOR_ID = exp.SUPPLIERINFOR_ID
		where df.status = '0'
		and df.year = #{year} and df.account is not null
		<if test="groupid!=null and groupid !=''">
			and df.GROUP_ID =  #{groupid}
		</if>
		group by exp.EXPATRIATESINFOR_ID,exp.EXPNAME,df.year,df.GROUP_ID,exp.SUPPLIERINFOR_ID
	</select>

	<select id="getcostMonthList" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		select co.*,
			concat(co.groupid,',',substring(#{years},1,4),',',substring(#{years},6,7)) as coststatistics_id,
		    workflow.status
		from (
			select
			group_id as groupid,
			round(sum(manhour4),2) as manhour4,
			round(sum(cost4 + expensesolo4),2) as cost4,
			round(sum(manhour5),2) as manhour5,
			round(sum(cost5 + expensesolo5),2) as cost5,
			round(sum(manhour6),2) as manhour6,
			round(sum(cost6 + expensesolo6),2) as cost6,
			round(sum(manhour7),2) as manhour7,
			round(sum(cost7 + expensesolo7),2) as cost7,
			round(sum(manhour8),2) as manhour8,
			round(sum(cost8 + expensesolo8),2) as cost8,
			round(sum(manhour9),2) as manhour9,
			round(sum(cost9 + expensesolo9),2) as cost9,
			round(sum(manhour10),2) as manhour10,
			round(sum(cost10 + expensesolo10),2) as cost10,
			round(sum(manhour11),2) as manhour11,
			round(sum(cost11 + expensesolo11),2) as cost11,
			round(sum(manhour12),2) as manhour12,
			round(sum(cost12 + expensesolo12),2) as cost12,
			round(sum(manhour1),2) as manhour1,
			round(sum(cost1 + expensesolo1),2) as cost1,
			round(sum(manhour2),2) as manhour2,
			round(sum(cost2 + expensesolo2),2) as cost2,
			round(sum(manhour3),2) as manhour3,
			round(sum(cost3 + expensesolo3),2) as cost3
			from coststatistics
			where years = substring(#{years},1,4)
			<if test="groupIdList != null and groupIdList.size() > 0 ">
			    and group_id in
				<foreach item="item" index="index" collection="groupIdList"
							 open="(" separator="," close=")">
					#{item}
				</foreach>
				</if>
			group by group_id
		) co
		left join
		(
			SELECT
				wf1.*
			FROM
				workflowinstance wf1
			WHERE
			NOT EXISTS
			(
				SELECT
				1
				FROM
				workflowinstance wf2
				WHERE
				wf2.DATAID = wf1.DATAID
				AND wf2.CREATEON > wf1.CREATEON
			)
		) workflow
		on workflow.DATAID = concat(co.groupid,',',substring(#{years},1,4),',',substring(#{years},6,7))
	</select>

	<select id="getcostMonth" parameterType="java.lang.String" resultType="java.util.HashMap">
			SELECT
				co1.bpcompany,
				case when co1.ex1manhour = '0.00' then '' else round(co1.ex1manhour,2) end ex1manhour0,
				case when co1.ex1cost = '0.00' then '' else round(co1.ex1cost,2) end ex1cost0,
				case when co1.ex1usercount = '0' then '' else co1.ex1usercount end ex1usercount0,
				case when co1.ex2manhour = '0.00' then '' else round(co1.ex2manhour,2) end ex2manhour0,
				case when co1.ex2cost = '0.00' then '' else round(co1.ex2cost,2) end ex2cost0,
				case when co1.ex2usercount = '0' then '' else co1.ex2usercount end ex2usercount0,
				'' as ex3manhour0,
				'' as ex3cost0,
				@manhourcount0 := round( co1.ex1manhour, 2 ) as manhourcount0,
				@manhourcount0 as bpmanhourcount,
				@costcount0 := round( co1.ex1cost, 2 ) as costcount0,
				@costcount0 as bpcostcount,
				'0' as ex3costcount,
				@costcount := round( co1.ex1cost + co1.ex2cost + co1.ex1manhour + co1.ex2manhour, 2 ) as costcount,
				@costcount as bpcount
			FROM
				(
					SELECT
						coststatistics.bpcompany,
						SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL ) THEN ${manhour} ELSE 0 END ) AS ex1manhour,
						SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL )
							THEN
								(
									${cost} + ${expensesolo}
								)
							ELSE 0 END ) AS ex1cost,
						SUM( CASE WHEN ( coststatistics.GROUP_ID = #{groupid} AND ex1.EXPATRIATESINFOR_ID IS NOT NULL
			AND (
			(
				${cost} + ${expensesolo}
			) > 0
			OR
			(
				ex1.EXITS = 1
				AND ex1.GROUP_ID = #{groupid}
			)
			OR
			(
				ex1.EXITS = 0
				AND DATE_FORMAT(ex1.EXITIME, '%Y-%m') >= DATE_FORMAT(concat( #{years},'-01' ), '%Y-%m')
				AND ex1.GROUP_ID = #{groupid}
			)
			)
			) THEN 1 ELSE 0 END ) AS ex1usercount,
						0 AS ex2manhour,
						0 AS ex2cost,
						0 AS ex2usercount
					FROM
						coststatistics
						LEFT JOIN expatriatesinfor ex1 ON coststatistics.bpname = ex1.expatriatesinfor_id
						AND ex1.jobclassification IN ('BP025001','BP025002','BP025005','BP025003','BP025004' )
					WHERE coststatistics.years = substring(#{years},1,4)
					GROUP BY bpcompany

					union all

					SELECT
						cs.BPCOMPANYID as bpcompany,
						0 AS ex1manhour,
						0 AS ex1cost,
						0 AS ex1usercount,
						CASE WHEN cs.GROUP_ID = #{groupid} THEN ${manhourf} ELSE 0 END AS ex2manhour,
						CASE WHEN cs.GROUP_ID = #{groupid} THEN ${costf} ELSE 0 END AS ex2cost,
						0 AS ex2usercount
			FROM
			companystatistics cs
			WHERE cs.`YEAR` = substring(#{years},1,4) AND (cs.${manhourf} !=0 or cs.${costf} !=0)
				) co1
			order by co1.bpcompany
	</select>

	<select id="getworkflowinstance" resultType="com.nt.dao_Workflow.Workflowinstance">
		SELECT
		wf1.workflowinstanceid
		FROM
		workflowinstance wf1
		WHERE
		NOT EXISTS ( SELECT 1 FROM workflowinstance wf2 WHERE wf2.DATAID = wf1.DATAID AND wf2.CREATEON > wf1.CREATEON )
		AND wf1.STATUS = '4'
		<if test="groupIdList != null and groupIdList.size() > 0 ">
			AND wf1.DATAID IN
			<foreach item="item" index="index" collection="groupIdList"
					 open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
	<!--	BP???-????-->
	<select id="getCoststatisticsExpense" resultType="com.nt.dao_Pfans.PFANS6000.Coststatistics">
		SELECT
			BPCOMPANY,
			CONVERT (
				SUM( expensesolo1 ),
			DECIMAL ( 10, 2 )) AS expensesolo1,
			CONVERT (
				SUM( expensesolo2 ),
			DECIMAL ( 10, 2 )) AS expensesolo2,
			CONVERT (
				SUM( expensesolo3 ),
			DECIMAL ( 10, 2 )) AS expensesolo3,
			CONVERT (
				SUM( expensesolo4 ),
			DECIMAL ( 10, 2 )) AS expensesolo4,
			CONVERT (
				SUM( expensesolo5 ),
			DECIMAL ( 10, 2 )) AS expensesolo5,
			CONVERT (
				SUM( expensesolo6 ),
			DECIMAL ( 10, 2 )) AS expensesolo6,
			CONVERT (
				SUM( expensesolo7 ),
			DECIMAL ( 10, 2 )) AS expensesolo7,
			CONVERT (
				SUM( expensesolo8 ),
			DECIMAL ( 10, 2 )) AS expensesolo8,
			CONVERT (
				SUM( expensesolo9 ),
			DECIMAL ( 10, 2 )) AS expensesolo9,
			CONVERT (
				SUM( expensesolo10 ),
			DECIMAL ( 10, 2 )) AS expensesolo10,
			CONVERT (
				SUM( expensesolo11 ),
			DECIMAL ( 10, 2 )) AS expensesolo11,
			CONVERT (
				SUM( expensesolo12 ),
			DECIMAL ( 10, 2 )) AS expensesolo12
		FROM
			coststatistics
		WHERE 1 = 1
		<if test="groupid != null and groupid !=''">
			and GROUP_ID = #{groupid}
		</if>
		<if test="years != null and years !=''">
			and YEARS = #{years}
		</if>
		GROUP BY
			BPCOMPANY
		ORDER BY
			GROUP_ID DESC
	</select>
</mapper>
